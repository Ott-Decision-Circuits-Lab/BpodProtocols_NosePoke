function sma = NosePoke_StateMatrix(iTrial)
global BpodSystem
global TaskParameters

TrialData = BpodSystem.Data.Custom.TrialData;

%% Define ports
LeftPort = floor(mod(TaskParameters.GUI.Ports_LMR/100, 10));
CenterPort = floor(mod(TaskParameters.GUI.Ports_LMR/10, 10));
RightPort = mod(TaskParameters.GUI.Ports_LMR, 10);

LeftPortOut = strcat('Port', num2str(LeftPort), 'Out');
CenterPortOut = strcat('Port', num2str(CenterPort), 'Out');
RightPortOut = strcat('Port', num2str(RightPort), 'Out');

LeftPortIn = strcat('Port', num2str(LeftPort), 'In');
CenterPortIn = strcat('Port', num2str(CenterPort), 'In');
RightPortIn = strcat('Port', num2str(RightPort), 'In');

LeftLight = strcat('PWM', num2str(LeftPort));
CenterLight = strcat('PWM', num2str(CenterPort));
RightLight = strcat('PWM', num2str(RightPort));

LeftValve = 2^(LeftPort-1);
CenterValve = 2^(CenterPort-1);
RightValve = 2^(RightPort-1);

%% Calculate value time for ports in different situations
LeftValveTime  = GetValveTimes(TrialData.RewardMagnitude(1, iTrial), LeftPort);
CenterValveTime = GetValveTimes(TrialData.CenterPortRewardAmount(iTrial), CenterPort);
RightValveTime = GetValveTimes(TrialData.RewardMagnitude(2, iTrial), RightPort);

%% Set up state matrix    
sma = NewStateMatrix();

PreITIAction = {};
if isfield(TaskParameters.GUI, 'Wire1VideoTrigger')
    switch TaskParameters.GUI.Wire1VideoTrigger
        case 1 % None

        case 2 % Investment

        case 3 % All
            PreITIAction =	{'WireState', 1};
    end         
end
sma = AddState(sma,...
               'Name', 'PreITI',...
               'Timer', TaskParameters.GUI.PreITI,...
               'StateChangeConditions', {'Tup', 'WaitCIn'},...
               'OutputActions', {});

sma = AddState(sma,...
               'Name', 'WaitCIn',...
               'Timer', TaskParameters.GUI.WaitCInMax,...
               'StateChangeConditions', {CenterPortIn, 'StartSampling',...
                                         'Tup', 'ITI'},...
               'OutputActions', {CenterLight, 255});

sma = SetGlobalTimer(sma, 1, TaskParameters.GUI.SamplingTarget);

sma = AddState(sma,...
               'Name', 'StartSampling',... % dummy state for trigger GlobalTimer1
               'Timer', 0.01,...
               'StateChangeConditions', {'Tup', 'Sampling',...
                                         'GlobalTimer1_End', 'StillSampling'},...
               'OutputActions', {'GlobalTimerTrig', 1});

TupStateChange = 'StillSampling';
if TrialData.CenterPortBaited(iTrial) == 1
    TupStateChange = 'WaterC';
end

SamplingAction = {};
switch TaskParameters.GUIMeta.Stimulus.String{TaskParameters.GUI.Stimulus}
    case 'None' % no adjustmnet needed
        
    case 'DelayDuration'
        if isfield(BpodSystem.ModuleUSB, 'HiFi1')
            SamplingAction = {'HiFi1', ['P' 5]};
        elseif isfield(BpodSystem.ModuleUSB, 'WavePlayer1')
            SamplingAction = {'WavePlayer1', ['P' 5]};
        elseif BpodSystem.EmulatorMode
            disp('BpodSystem is in EmulatorMode. No Sampling Stimulus for DelayDuration is played.');
        else
            disp('Neither HiFi nor analog module is setup. No Sampling Stimulus for DelayDuration is played.');
        end
        
    case 'EndBeep'
        if isfield(BpodSystem.ModuleUSB, 'HiFi1')
            SamplingAction = {'HiFi1', ['P' 5]};
        elseif isfield(BpodSystem.ModuleUSB, 'WavePlayer1')
            SamplingAction = {'WavePlayer1', ['P' 5]};
        elseif BpodSystem.EmulatorMode
            disp('BpodSystem is in EmulatorMode. No Sampling EndBeep is played.');
        else
            disp('Neither HiFi nor analog module is setup. No Sampling EndBeep is played.');
        end
        
end
sma = AddState(sma,...
               'Name', 'Sampling',...
               'Timer', TaskParameters.GUI.SamplingTarget,...
               'StateChangeConditions', {CenterPortOut, 'SamplingGrace',...
                                         'Tup', TupStateChange,...
                                         'GlobalTimer1_End', TupStateChange},...
               'OutputActions', SamplingAction);

sma = AddState(sma,...
               'Name', 'SamplingGrace',...
               'Timer', TaskParameters.GUI.SamplingGrace,...
               'StateChangeConditions', {CenterPortIn, 'Sampling',...
                                         'Tup', 'BrokeFixation',...
                                         'GlobalTimer1_End', 'BrokeFixation',...
                                         LeftPortIn, 'BrokeFixation',...
                                         RightPortIn, 'BrokeFixation'},...
               'OutputActions', {});

BrokeFixationAction = {};
switch TaskParameters.GUIMeta.BrokeFixationFeedback.String{TaskParameters.GUI.BrokeFixationFeedback}
    case 'None' % no adjustmnet needed
        
    case 'WhiteNoise'
        if isfield(BpodSystem.ModuleUSB, 'HiFi1')
            BrokeFixationAction = {'HiFi1', ['P' 0]};
        elseif isfield(BpodSystem.ModuleUSB, 'WavePlayer1')
            BrokeFixationAction = {'WavePlayer1', ['P' 0]};
        elseif BpodSystem.EmulatorMode
            disp('BpodSystem is in EmulatorMode. No BrokeFixation WhiteNoise is played.');
        else
            disp('Neither HiFi nor analog module is setup. No BrokeFixation WhiteNoise is played.');
        end
        
end
sma = AddState(sma,...
               'Name', 'BrokeFixation',...
               'Timer', TaskParameters.GUI.BrokeFixationTimeOut,...
               'StateChangeConditions', {'Tup', 'ITI'},...
               'OutputActions', BrokeFixationAction);

%% CenterPortBaited versus ~CenterPortBaited
LeftLightValue = 255;
RightLightValue = 255;
if TrialData.LightLeft(iTrial) == 1
    RightLightValue = 0;
elseif TrialData.LightLeft(iTrial) == 0
    LeftLightValue = 0;
end
sma = AddState(sma,...
               'Name', 'WaterC',...
               'Timer', CenterValveTime,...
               'StateChangeConditions', {'Tup', 'DrinkingC'},...
               'OutputActions', {'ValveState', CenterValve,...
                                 LeftLight, LeftLightValue,...
                                 RightLight, RightLightValue});

sma = AddState(sma,...
               'Name', 'DrinkingC',... % by passing dummy state StillSampling -> no trigger GlobalTimer2
               'Timer', 4,... % hardcoded
               'StateChangeConditions', {'Tup', 'WaitSIn'},...
               'OutputActions', {LeftLight, LeftLightValue,...
                                 RightLight, RightLightValue});

sma = SetGlobalTimer(sma, 2, TaskParameters.GUI.ChoiceDeadline); % used to track side poke grace period

sma = AddState(sma,...
               'Name', 'StillSampling',... % dummy state for trigger GlobalTimer2
               'Timer', TaskParameters.GUI.ChoiceDeadline,...
               'StateChangeConditions', {'Tup', 'NoDecision',...
                                         CenterPortOut, 'WaitSIn',...
                                         'GlobalTimer2_End', 'NoDecision'},...
               'OutputActions', {'GlobalTimerTrig', 2,...
                                 LeftLight, LeftLightValue,...
                                 RightLight, RightLightValue});

NoDecisionAction = {};
switch TaskParameters.GUIMeta.NoDecisionFeedback.String{TaskParameters.GUI.NoDecisionFeedback}
    case 'None' % no adjustmnet needed
        
    case 'WhiteNoise'
        if isfield(BpodSystem.ModuleUSB, 'HiFi1')
            NoDecisionAction = {'HiFi1', ['P' 1]};
        elseif isfield(BpodSystem.ModuleUSB, 'WavePlayer1')
            NoDecisionAction = {'WavePlayer1', ['P' 1]};
        elseif BpodSystem.EmulatorMode
            disp('BpodSystem is in EmulatorMode. No NoDecision WhiteNoise will be played.');
        else
            disp('Neither HiFi nor analog module is setup. No NoDecision WhiteNoise will be played.');
        end
        
end
sma = AddState(sma,...
               'Name', 'NoDecision',...
               'Timer', TaskParameters.GUI.NoDecisionTimeOut,...
               'StateChangeConditions', {'Tup','ITI'},...
               'OutputActions', NoDecisionAction);

sma = AddState(sma,...
               'Name', 'WaitSIn',...
               'Timer', 0,...
               'StateChangeConditions', {LeftPortIn, 'StartLIn',...
                                         RightPortIn, 'StartRIn',...
                                         'GlobalTimer2_End', 'NoDecision'},...
               'OutputActions', {LeftLight, LeftLightValue,...
                                 RightLight, RightLightValue});

%%
FeedbackDelayLeft = TrialData.FeedbackDelay(iTrial);
FeedbackDelayRight = TrialData.FeedbackDelay(iTrial);

sma = SetGlobalTimer(sma, 3, FeedbackDelayLeft); % used to track side poke grace period

LInStateChange = 'WaterL';
if TrialData.Baited(1, iTrial) == false
    LInStateChange = 'NotBaited';
end
if TrialData.LightLeft(iTrial) == false % Incorrect Choice overwrite Baited 
    LInStateChange = 'IncorrectChoice';
end

sma = AddState(sma,...
               'Name', 'StartLIn',... % dummy state for trigger GlobalTimer3
               'Timer', 0,...
               'StateChangeConditions', {'Tup', 'LIn',...
                                         'GlobalTimer3_End', LInStateChange},...
               'OutputActions', {'GlobalTimerTrig', 3,...
                                 LeftLight, LeftLightValue});

sma = AddState(sma, 'Name', 'LIn',...
    'Timer', FeedbackDelayLeft,...
    'StateChangeConditions', {'Tup', LInStateChange,...
                              'GlobalTimer3_End', LInStateChange,...
                              LeftPortOut,'LInGrace'},...
    'OutputActions', {LeftLight, LeftLightValue});

sma = AddState(sma, 'Name', 'WaterL',...
    'Timer', LeftValveTime,...
    'StateChangeConditions', {'Tup', 'Drinking'},...
    'OutputActions', {'ValveState', LeftValve});

sma = AddState(sma, 'Name', 'LInGrace',...
    'Timer', TaskParameters.GUI.FeedbackDelayGrace,...
    'StateChangeConditions', {LeftPortIn, 'LIn',...
                              'Tup', 'SkippedFeedback',...
                              'GlobalTimer3_End', 'SkippedFeedback',...
                              CenterPortIn, 'SkippedFeedback',...
                              RightPortIn, 'SkippedFeedback'},...
    'OutputActions', {LeftLight, LeftLightValue});

sma = SetGlobalTimer(sma, 4, FeedbackDelayRight); % used to track side poke grace period

RInStateChange = 'WaterR';
if TrialData.Baited(2, iTrial) == false
    RInStateChange = 'NotBaited';
end
if TrialData.LightLeft(iTrial) == true % Incorrect Choice overwrite Baited 
    RInStateChange = 'IncorrectChoice';
end
sma = AddState(sma,...
               'Name', 'StartRIn',... % dummy state for trigger GlobalTimer3
               'Timer', 0,...
               'StateChangeConditions', {'Tup', 'RIn',...
                                         'GlobalTimer4_End', RInStateChange},...
               'OutputActions',{'GlobalTimerTrig', 4,...
                                RightLight, RightLightValue});

sma = AddState(sma,...
               'Name', 'RIn',...
               'Timer', FeedbackDelayRight,...
               'StateChangeConditions', {'Tup', RInStateChange,...
                                         'GlobalTimer4_End', RInStateChange,...
                                         RightPortOut,'RInGrace'},...
               'OutputActions', {RightLight, RightLightValue});

sma = AddState(sma,...
               'Name', 'WaterR',...
               'Timer', RightValveTime,...
               'StateChangeConditions', {'Tup', 'Drinking'},...
               'OutputActions', {'ValveState', RightValve});

sma = AddState(sma,...
               'Name', 'RInGrace',...
               'Timer', TaskParameters.GUI.FeedbackDelayGrace,...
               'StateChangeConditions', {RightPortIn, 'RIn',...
                                         'Tup', 'SkippedFeedback',...
                                         'GlobalTimer4_End', 'SkippedFeedback',...
                                         CenterPortIn, 'SkippedFeedback',...
                                         LeftPortIn, 'SkippedFeedback'},...
               'OutputActions', {RightLight, RightLightValue});

IncorrectChoiceAction = {};
switch TaskParameters.GUIMeta.IncorrectChoiceFeedback.String{TaskParameters.GUI.IncorrectChoiceFeedback}
    case 'None' % no adjustmnet needed
        
    case 'WhiteNoise'
        if isfield(BpodSystem.ModuleUSB, 'HiFi1')
            IncorrectChoiceAction = {'HiFi1', ['P' 2]};
        elseif isfield(BpodSystem.ModuleUSB, 'WavePlayer1')
            IncorrectChoiceAction = {'WavePlayer1', ['P' 2]};
        elseif BpodSystem.EmulatorMode
            disp('BpodSystem is in EmulatorMode. No IncorrecChoice WhiteNoise will be played.');
        else
            disp('Neither HiFi nor analog module is setup. No IncorrecChoice WhiteNoise will be played.');
        end
        
end
sma = AddState(sma,...
               'Name', 'IncorrectChoice',...
               'Timer', TaskParameters.GUI.IncorrectChoiceTimeOut,...
               'StateChangeConditions', {'Tup', 'ITI'},...
               'OutputActions', IncorrectChoiceAction);

SkippedFeedbackAction = {};
switch TaskParameters.GUIMeta.SkippedFeedbackFeedback.String{TaskParameters.GUI.SkippedFeedbackFeedback}
    case 'None' % no adjustmnet needed
        
    case 'WhiteNoise'
        if isfield(BpodSystem.ModuleUSB, 'HiFi1')
            SkippedFeedbackAction = {'HiFi1', ['P' 3]};
        elseif isfield(BpodSystem.ModuleUSB, 'WavePlayer1')
            SkippedFeedbackAction = {'WavePlayer1', ['P' 3]};
        elseif BpodSystem.EmulatorMode
            disp('BpodSystem is in EmulatorMode. No SkippedFeedback WhiteNoise will be played.');
        else
            disp('Neither HiFi nor analog module is setup. No SkippedFeedback WhiteNoise will be played.');
        end
        
    case 'Beep'
        if isfield(BpodSystem.ModuleUSB, 'HiFi1')
            SkippedFeedbackAction = {'HiFi1', ['P' 3]};
        elseif isfield(BpodSystem.ModuleUSB, 'WavePlayer1')
            SkippedFeedbackAction = {'WavePlayer1', ['P' 3]};
        elseif BpodSystem.EmulatorMode
            disp('BpodSystem is in EmulatorMode. No SkippedFeedback Beep will be played.');
        else
            disp('Neither a HiFi nor analog module is setup. No SkippedFeedback Beep will be played.');
        end
        
end
sma = AddState(sma,...
               'Name', 'SkippedFeedback',...
               'Timer', TaskParameters.GUI.SkippedFeedbackTimeOut,...
               'StateChangeConditions', {'Tup', 'ITI'},...
               'OutputActions', SkippedFeedbackAction);

NotBaitedAction = {};
switch TaskParameters.GUIMeta.NotBaitedFeedback.String{TaskParameters.GUI.NotBaitedFeedback}
    case 'None' % no adjustmnet needed
        
    case 'WhiteNoise'
        if isfield(BpodSystem.ModuleUSB, 'HiFi1')
            NotBaitedAction = {'HiFi1', ['P' 4]};
        elseif isfield(BpodSystem.ModuleUSB, 'WavePlayer1')
            NotBaitedAction = {'WavePlayer1', ['P' 4]};
        elseif BpodSystem.EmulatorMode
            disp('BpodSystem is in EmulatorMode. No NotBaited WhiteNoise will be played.');
        else
            disp('Neither HiFi nor analog module is setup. No NotBaited WhiteNoise will be played.');
        end
        
    case 'Beep'
        if isfield(BpodSystem.ModuleUSB, 'HiFi1')
            NotBaitedAction = {'HiFi1', ['P' 4]};
        elseif isfield(BpodSystem.ModuleUSB, 'WavePlayer1')
            NotBaitedAction = {'WavePlayer1', ['P' 4]};
        elseif BpodSystem.EmulatorMode
            disp('BpodSystem is in EmulatorMode. No NotBaited Beep will be played.');
        else
            disp('Neither HiFi nor analog module is setup. No NotBaited Beep will be played.');
        end
        
end
sma = AddState(sma,...
               'Name', 'NotBaited',...
               'Timer', TaskParameters.GUI.NotBaitedTimeOut,...
               'StateChangeConditions', {'Tup', 'ITI'},...
               'OutputActions', NotBaitedAction);

sma = AddState(sma,...
               'Name', 'Drinking',... % serve as time buffer before next trial start
               'Timer', 0,...
               'StateChangeConditions', {LeftPortOut, 'DrinkingGrace',...
                                         RightPortOut, 'DrinkingGrace'},...
               'OutputActions', {});

DrinkingGraceTimer = TaskParameters.GUI.DrinkingGraceTime;
sma = AddState(sma,...
               'Name', 'DrinkingGrace',... % serve as time buffer before next trial start
               'Timer', DrinkingGraceTimer,...
               'StateChangeConditions', {LeftPortIn, 'Drinking',...
                                         RightPortIn, 'Drinking',...
                                         'Tup', 'ITI'},...
               'OutputActions', {});

ITITimer = TaskParameters.GUI.ITI;
if TaskParameters.GUI.VI
    ITITimer = min([exprnd(TaskParameters.GUI.ITI), TaskParameters.GUI.ITI * 5]); % exp(-5) = 0.0067
end
sma = AddState(sma,...
               'Name', 'ITI',...
               'Timer', ITITimer,...
               'StateChangeConditions',{'Tup', 'exit'},...
               'OutputActions',{});

end % StateMatrix